Programming Language:

Program --> compilation --> Execute

JAVA
--------

JDK ? Java Development Kit 

Oracle: JDK download --> select version --> select OS

----------------------------------------------------------------------

Main method in JAVA
-------------------------------

public: It can be accessible from everywhere

static: it is going call itself 

main: name of your method

it can accpet variable argument(any number of arguments) in the form of string

(String args[])

First Program
-------------------------------
class Hello{
	
	public static void main(String args[]){

		System.out.println("Hello World");
	}
}


to execute: open the folder in termial and execute

javac Hello.java (to compile you will get .class file after that)

java Hello (Run)
___________________________________________________________________________________

Naming convention
---------------------------

class Name: UpperCamelCase (HelloWorld)

variable/method Name: lowerCamelCase (helloWorld)

packagename: lower case only

starts with com/org/edu etc

example: com.theody.project1

______________________________________________________________
Let's understand System.out.println()

System is a class

out is a variable declared with Type PrintWriter which is static

println() method of printwriter class

________________________________________________________________________


class Hello{
	
	public static String name="Sonam Soni";
}

class Main{
	public static void main(String args[]){

		System.out.println(Hello.name.length());
	}
}
________________________________________________________________________________

Datatype
-------------------------

premitive (8 datatypes)

byte  -  1 byte 
short -  2 byte
int   -  4 byte
long  -  8 byte
float - 4 byte
double - 8 byte
char   - 2 byte
boolean - 1 bit (0-false or 1-true)

__________________________________________________________________________________

package com.theody.project1.basics;

public class VariableDemo {

	public static void main(String[] args) {
		
		byte a=1;
		int b= 23;
		short c= 34;
		long d= 1253612321;
		float e= 123.45f;
		double f= 4567.00;
		char g= 'Z';
		boolean h= 18>90;
		
		//print these values
		System.out.println("Byte: "+a);
		System.out.println("Integer: "+b);
		System.out.println("Boolean: "+h);
	}
}

_____________________________________________________________________________________

Operators
--------------------
Arithmetic Operators 

+ (Addition)
- (subtraction)
* (Multiplication)
/ (Division)
% (Modulo)= return reminder

package com.theody.project1.basics;

import java.util.Scanner;

public class Addition {

	public static void main(String[] args) {
		//take 2 inputs from user
		Scanner sc= new Scanner(System.in);
		System.out.println("Enter First Number");
		int num1= sc.nextInt();
		System.out.println("Enter Second Number");
		int num2= sc.nextInt();
		
		int result= num1+num2;
		System.out.println(num1+ " + " + num2 + " = "+ result);
	}
}


Task 1: WAP to check weather the given number is even or odd.
(Take inputs using Scanner)
(use if else for condition)

Task 2: WAP to print the users grade according to the percentage

70 to 100 - A+
60 to 69 - A
50 to 59 - B
35 to 49 - C
0 to 34 - Sorry you are Fail..!

(else if and for logic you need use logical operator (&&))

take input from use using scanner

if(per>=70 && per<=100)
	A+
else if()
else if()


else{
	Kindly enter the correct percentage
}
_____________________________________________________________________

Switch case
--------------------------
String or charcter or number then use switch case

WAP to take input from use and as per the user input perform operation.
+  addition
- subtraction

________________________________________________________________________________

Solution:

package com.theody.project1.basics;

import java.util.Scanner;

public class SwitchCase {

	public static void main(String[] args) {
		
		Scanner sc= new Scanner(System.in);
		System.out.println("Enter First Number");
		int num1= sc.nextInt();
		System.out.println("Enter Second Number");
		int num2= sc.nextInt();
		System.out.println("Enter\n+ for Addition\n- for Subtraction\n* for Multiplication"
				+ "\n/ for Division");
		String op= sc.next();
		switch(op) {
			case "+": System.out.println("Addition: "+(num1+num2)); break;
			case "-": System.out.println("Subtraction: "+(num1-num2)); break;
			case "*": System.out.println("Multiplication: "+(num1*num2)); break;
			case "/": System.out.println("Division: "+(num1/num2)); break;
			default: System.out.println("Choose proper Operator");
		}
	}
}


________________________________________________________________________________________________

Nested If

if you want to check the conditions indide one more condition then we required a nested if.

 3 numbers and check the largest from the same.

package com.theody.project1.basics;

import java.util.Scanner;

public class NestedIf {

	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);
		System.out.println("Enter First Number");
		int num1= sc.nextInt();
		System.out.println("Enter Second Number");
		int num2= sc.nextInt();
		System.out.println("Enter Third Number");
		int num3= sc.nextInt();
		if(num1>num2) {
			if(num1>num3)
				System.out.println(num1+" is largest");
			else
				System.out.println(num3+ " is largest");
		}
		else {
			if(num2>num3)
				System.out.println(num2+" is larger");
			else
				System.out.println(num3+" is larger");
		}
	}
}

__________________________________________________________________________________

Iterative Task (Repeatative Task)

Loops: while, do while , for

while(condition){
	//statements
}

do{
	statements
}
while(condition);

for(initialization; condition; increment/decrement){
	//statements
}
___________________________________________________________________________________
package com.theody.project1.basics;

public class Loops {

	public static void main(String[] args) {
		int i=1;
		System.out.println("While loop");
		while(i<=5) {
			System.out.println(i);
			i++; //increase the value by 1
		}
		System.out.println("Do While Loop");
		do {
			System.out.println(i);
			i++;
		}while(i<=10);
		System.out.println("For Loop");
		for(i=1;i<=5;i++) {
			System.out.println(i);
		}
	}
}

_________________________________________________________________________________________

break and continue statements.

break is basically helping you to break the loop

and continue will help you to skip that perticular iteration




package com.theody.project1.basics;

public class Loops {

	public static void main(String[] args) {
		
		for(int i=1; i<50;i++) {
			
			if(i%3==0)
				continue;
			System.out.println(i);
			
			if(i==47)
				break;
		}
	}
}

__________________________________________________________________________________________
package com.theody.project1.basics;

public class Loops {

	public static void main(String[] args) {
		
		for(int i=10; i>0;i--) {
			System.out.println(i);
		}
	}
}
_________________________________________________________________________________________

Post Increment and pre increment

i++                                   ++i

i=i+1				      i= i+1
First Assign			      First Increment
then increment			      Then Assign

i=0					i=0
a=i++;					a=++i;

a=0 & i=1				a=1 & i=1;

__________________________________________________________________________

a=0;

x= a++ + ++a;

value of a=?  & x=?
__________________________________________________________________________
package com.theody.project1.basics;

public class Loops {

	public static void main(String[] args) {
		int a=0;
		int x= a++ + ++a;
		System.out.println("a: "+a);
		System.out.println("x: "+x);
		//try with pre decrement and post decrement and check output
	}
}

______________________________________________________________________________________

Nested Loops

loop inside a loop
----------------------------

package com.theody.project1.basics;

public class NestedLoop {

	public static void main(String[] args) {
		for(int i=8;i>0;i--) {
			for(int j=1;j<=i;j++){
				System.out.print(j+" ");
			}
			System.out.println();
		}
	}
}
______________________________________________________________________________

Methods:  a set of statements which is written to execute a certain task.

accessModifier returnType methodname(set of parameters){

	//set of statements

}

accessModifiers: public, private, protected or default

returnType: any datatype your can return
	    if you don't want to return any value then the returnType Should be void.
method name: any accourding to your requirements

() - if no parameters keep this empty else give parameter with data type seprated by comma

__________________________________________________________________________

Caling method with the helps of Class Object

package com.theody.project1.basics;

public class Methods {

	public void print() {
		System.out.println("Hello World");
	}
	public void add(int a, int b) {
		System.out.println("Addition is "+(a+b));
	}
	public void square(int n) {
		System.out.println("Square: "+(n*n));
	}
	public static void main(String[] args) {
		Methods m= new Methods();//object of my class
		m.print();
		m.add(23, 12);
		m.square(5);
	}
}



Calling methods with static keywords
---------------------------------------
package com.theody.project1.basics;

public class Methods {

	public static void print() {
		System.out.println("Hello World");
	}
	public static void add(int a, int b) {
		System.out.println("Addition is "+(a+b));
	}
	public static void square(int n) {
		System.out.println("Square: "+(n*n));
	}
	public static void main(String[] args) {
		Methods.print();
		Methods.add(23, 12);
		Methods.square(5);
	}
}

______________________________________________________________________________

Methods with return type

package com.theody.project1.basics;

public class Methods {

	public String print() {
		return "Hello World";
	}
	public int add(int a,int b) {
		return a+b;
	}
	public double cube(double x) {
		return x*x*x;
	}
	
	public static void main(String[] args) {
		Methods m= new Methods();//object of my class
		String result= m.print();
		System.out.println(result);
		System.out.println("Addition: "+ m.add(12, 1));
		System.out.println("Cube of 5: "+m.cube(5));
	}
}

______________________________________________________________________________________________

Class And Object
-------------------------------------

class Car{
	//member variable
	String brand
	String color
	int model_no

	//member methods
	start()
	stop()
	increaseSpeed()
	decreaseSpeed()
}

from that class we can create multiple object
____________________________________________________________________________________

Base class in JAVA is Object class
_________________________________________________________________________
package com.theody.project1.oops;

public class Student {
	//member variables
	int rollNo;
	String firstName;
	String lastName;
	String email;
	//member functions
	public void setData(int r,String fname,String lname,String e) {
		rollNo=r;
		firstName=fname;
		lastName=lname;
		email=e;
	}
	public void display() {
		System.out.println("RollNo: "+rollNo);
		System.out.println("First Name: "+firstName);
		System.out.println("Last Name: "+lastName);
		System.out.println("Email: "+email);
	}
}


Test it using Test class

package com.theody.project1.oops;

public class Test {

	public static void main(String[] args) {
		
		Student s1= new Student(); //object of 

student class
		s1.setData(1, "Sonam", "Soni", "sonam@gmail.com");
		s1.display();
	}
}

__________________________________________________________________________________________

All variables value are accesible outside of the class directly. Let's hide.

Encaptulation: Hiding values from direct access and wrap it with some getters and setters.

Let's declare all the variables as private.

package com.theody.project1.oops;

public class Student {
	
	private int rollNo;
	private String firstName;
	private String lastName;
	private String email;
	public int getRollNo() {
		return rollNo;
	}
	public void setRollNo(int rollNo) {
		this.rollNo = rollNo;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	
	
}
__________________________________________________________________________________

package com.theody.project1.oops;

public class Test {

	public static void main(String[] args) {
		
		Student s1= new Student();
		s1.setRollNo(1);
		s1.setFirstName("Sonam");
		s1.setLastName("Soni");
		s1.setEmail("Email");
		
		System.out.println("Student Details");
		System.out.println("Roll No: "+s1.getRollNo());
		System.out.println("FirstName: "+s1.getFirstName());
		//similarly you can print lastname and email too 
	}
}

_____________________________________________________________________________________

Constructor:

we can construct object using constructor.

we can initialize values using constructor.

it is a special method in JAVA
	-- the name of a constructor is same as class name
	-- there is no returntype required for the constructor
	-- when we create a object of a class automatically it will call the constructor
	-- we are not calling cnstructors explicitly
	-- if you are not creating any constructor then compiler provide default constructor to JVM.
	-- we can also create multiple constructor with different parameters.(constructor overloading)

package com.theody.project1.oops;

public class Student {
	
	//class level variable
	private int rollNo;
	private String firstName;
	private String lastName;
	private String email;
	public Student() {}
	public Student(int rollNo,String firstName) {
		this.rollNo=rollNo;
		this.firstName=firstName;
	}
	public Student(int rollNo,String firstName,
			String lastName,String email) {
		//local variables
		this.rollNo=rollNo;
		this.firstName=firstName;
		this.lastName=lastName;
		this.email=email;
	}

	public int getRollNo() {
		return rollNo;
	}
	public String getFirstName() {
		return firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public String getEmail() {
		return email;
	}
}

package com.theody.project1.oops;

public class Test {

	public static void main(String[] args) {
		
		Student s1= new Student(1,"Sonam","Soni","sonam@gmail.com");
		
		System.out.println("Student Details");
		System.out.println("Roll No: "+s1.getRollNo());
		System.out.println("FirstName: "+s1.getFirstName());
		System.out.println("Last Name: "+s1.getLastName());
		System.out.println("Email: "+s1.getEmail());
		
		Student s2= new Student();
		System.out.println("Student Details");
		System.out.println("Roll No: "+s2.getRollNo());
		System.out.println("FirstName: "+s2.getFirstName());
		
		Student s3= new Student(3, "John");
		System.out.println("Student Details");
		System.out.println("Roll No: "+s3.getRollNo());
		System.out.println("FirstName: "+s3.getFirstName());
				
	}
}
===============================================================================================

Array: squence of data with Same Datatype

ways to declare array

int nums[]={10,20,30,40,50,60};

int nums[]= new int[10];

___________________________________

package com.theody.project1.oops;

import java.util.Scanner;

public class ArrayDemo {

	public static void main(String[] args) {
		int nums[]={10,20,30,40,50,60};
		System.out.println("2nd element "+ nums[1]);
		for(int x:nums)
			System.out.print(x+", ");
		System.out.println();
		String colors[]= new String[5];
		Scanner sc= new Scanner(System.in);
		for(int i=0;i<colors.length;i++) {
			System.out.println("Enter Colors");
			colors[i]= sc.next();
		}
		System.out.println("Colors Array");
		for(String x: colors) {
			System.out.print(x+", ");
		}
	}
}


============================================================================
Objects array using the same Student class created priviosly for creating students Array.

package com.theody.project1.oops;

import java.util.Scanner;

public class ArrayDemo {

	public static void main(String[] args) {
		
		Student array[]= new Student[5];
		array[0]= new Student(1, "alex", "joe", "alex@gmail.com");
		array[1]= new Student(2, "bob", "doe", "bob@gmail.com");
		array[2]= new Student(3, "catty", "barreto", "catty@gmail.com");
		array[3]= new Student(4, "nelson", "mondela", "nelson@gmail.com");
		array[4]= new Student(5, "sachin", "tendulakar", "sachin@gmail.com");
		
		for(Student s:array) {
			System.out.println(s.getRollNo()+" "+s.getFirstName()+" "+
		s.getLastName()+" "+s.getEmail());
		}
	}
}
_________________________________________________________________________________________

Multi dimentional Array
-------------------------------------------

package com.theody.project1.oops;

public class TwoDimentionalArray {

	public static void main(String[] args) {
		
		int arr[][]= {{1,2,3},{4,5,6},{7,8,9}};
		//print use nested loop
		for(int i=0;i<=2;i++) {
			for(int j=0;j<=2;j++) {
				System.out.print(arr[i][j]+"\t");
			}
			System.out.println();
		}
	}
}

_____________________________________________________________________________________________
Polymorphism
-------------------------

poly(Many) Morph(Forms)

2 types
------------
1.Static Polymorphism (compiletime polymorphism / early binding/ method overloading)

same method with diffrent parameters

(no need to check return types)
-------------------------------------------------------------------
package com.theody.project1.oops;

public class Overload {

	public static void main(String[] args) {
		
		System.out.println(true); // call println(boolean)
		System.out.println(24);//call println(int)
		System.out.println(67.89);//call println(double)
		System.out.println(12.67f);//call println(float)
		System.out.println("Sonam Soni");//call println(char[])
	}
}

---------------------------------------------------------------------------------

package com.theody.project1.oops;

public class MethodOverload {

	public int add(int a,int b) {
		return a+b;
	}
	public float add(float a,float b) {
		return a+b;
	}
	public double add(double a,double b) {
		return a+b;
	}
	public static void main(String[] args) {
		MethodOverload m= new MethodOverload();
		System.out.println("Addition "+ m.add(1, 2));
		System.out.println("Addition "+ m.add(10.0f, 2.3f));
		System.out.println("Addition "+ m.add(10.78, 20.8));
	}
}
============================================================================================

Inheritance
------------------------

If we want to reuse the properties of Some class then we can make that class as a parent and we can use the properties direclty.

Child can access the properties of Parent

Parent/ Super/ Base class
Child/ Sub/ Derived class

to use the properies we need to use extends keyword.

class Sub extends Super{
}

parent class name always come after the child class.

--> Child class can not access the private properties of parent class (how to hide this values? 
protected)

package com.theody.project1.inheritance;

public class Account {

	protected long accNo;
	protected String accHolderName;
	
	public Account(int accNo,String accHolderName) {
		this.accNo=accNo;
		this.accHolderName=accHolderName;
	}
}


package com.theody.project1.inheritance;

public class CurrentAccount extends Account{

	float withdrawCharges=0.2f;//0.2%
	
	public CurrentAccount(int accNo, String accHolderName ) {
		super(accNo,accHolderName);//pass values to parent class constructor
		System.out.println("Current Account Constructor");
	}
	public static void main(String[] args) {
		
		CurrentAccount c= new CurrentAccount(199100,"Nelson Mondela");
		System.out.println(c.accNo);
		System.out.println(c.accHolderName);
		System.out.println(c.withdrawCharges);
		
	}
}

______________________________________________________________________________________________

Dynamic Polymorphism (Method Overriding/ late binding/ dynamic method dispatch/run time polymorphism)

package com.theody.project1.inheritance;

public class Account {

	protected long accNo;
	protected String accHolderName;
	private double balance=5000;
	
	public Account(int accNo,String accHolderName) {
		this.accNo=accNo;
		this.accHolderName=accHolderName;
	}
	void printBal(){
		System.out.println("Available Balance is from Parent "+balance);
	}
	public double getBalance() {
		return balance;
	}
	
}


package com.theody.project1.inheritance;

public class CurrentAccount extends Account{

	float withdrawCharges=0.2f;//0.2%
	
	public CurrentAccount(int accNo, String accHolderName ) {
		super(accNo,accHolderName);//pass values to parent class constructor
		System.out.println("Current Account Constructor");
	}
	void printBal(){
		super.printBal();
		System.out.println("Available Balance is from Child "+getBalance());
	}
	public static void main(String[] args) {
		
		CurrentAccount c= new CurrentAccount(199100,"Nelson Mondela");
		System.out.println(c.accNo);
		System.out.println(c.accHolderName);
		System.out.println(c.withdrawCharges);
		c.printBal();
		
	}
}

___________________________________________________________________________________________________

If c.printBacl method called then it will override the parent method and call its own method.
if you want to call parent class method then explicitly you can call with super key word
















































































































































































































































































































































 
































